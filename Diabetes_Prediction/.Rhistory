getwd()
library(ggplot2)
data = read.csv("diabaetes.csv")
data = read.csv("/diabaetes.csv")
data = read.csv("diabetes.csv")
View(data)
library(ggplot2)
cormat
cormat <- round(cor(data),2)
cormat
library(ggplot2)
data = read.csv("diabetes.csv")
head(data)
cormat <- round(cor(data),2)
cormat
ggplot(data = data,aes(x = Outcome, y = BMI)) + geom_histogram()
ggplot(data = data,aes(x = BMI, y = Outcome)) + geom_histogram()
qplot(Glucose, Outcome, data = data,geom = "bar", stat ="identity", fill =   country)
qplot(Glucose, Outcome, data = data,geom = "bar", stat ="identity")
ggplot(data,aes(Outcome)) + geom_bar()
install.packages('caTools')
library(ggplot2)
split <- sample.split(data$Outcome, SplitRatio = 0.75)
library(caTools)
set.seed(88)
split <- sample.split(data$Outcome, SplitRatio = 0.75)
dresstrain <- subset(data, split == TRUE)
dresstest <- subset(data, split == FALSE)
model <- glm (Outcome ~ .-ID, data = dresstrain, family = binomial)
View(data)
model <- glm (Outcome ~ .-, data = dresstrain, family = binomial)
model <- glm (Outcome ~ .-Insulin, data = dresstrain, family = binomial)
summary(model)
?glm()
predict <- predict(model, type = 'response')
table(dresstrain$Recommended, predict > 0.5)
table(dresstrain$Outcome, predict > 0.5)
library(ROCR)
install.packages('ROCR')
library(ROCR)
ROCRpred <- prediction(predict, dresstrain$Recommended)
library(ROCR)
ROCRpred <- prediction(predict, dresstrain$Outcome)
ROCRperf <- performance(ROCRpred, 'tpr','fpr')
plot(ROCRperf, colorize = TRUE, text.adj = c(-0.2,1.7))
#plot glm
ggplot(dresstrain, aes(x=Rating, y=Recommended)) + geom_point() +
stat_smooth(method="glm", family="binomial", se=FALSE)
library(ROCR)
ROCRpred <- prediction(predict, dresstrain$Outcome)
ROCRperf <- performance(ROCRpred, 'tpr','fpr')
plot(ROCRperf, colorize = TRUE, text.adj = c(-0.2,1.7))
#plot glm
ggplot(dresstrain, aes(x=Insulin, y=Outcome)) + geom_point() +
stat_smooth(method="glm", family="binomial", se=FALSE)
library(ggplot2)
data = read.csv("diabetes.csv")
head(data)
cormat <- round(cor(data),2)
cormat
ggplot(data,aes(Outcome)) + geom_bar()
library(caTools)
set.seed(88)
split <- sample.split(data$Outcome, SplitRatio = 0.75)
dresstrain <- subset(data, split == TRUE)
dresstest <- subset(data, split == FALSE)
model <- glm (Outcome ~ .-Insulin, data = dresstrain, family = binomial)
summary(model)
predict <- predict(model, type = 'response')
library(ROCR)
ROCRpred <- prediction(predict, dresstrain$Outcome)
ROCRperf <- performance(ROCRpred, 'tpr','fpr')
plot(ROCRperf, colorize = TRUE, text.adj = c(-0.2,1.7))
#plot glm
ggplot(dresstrain, aes(x=Insulin, y=Outcome)) + geom_point() +
stat_smooth(method="glm", family="binomial", se=FALSE)
library(corrplot)
install.packages('corrplot')
library(corrplot)
correlations <- cor(data)
corrplot(correlations, method="circle")
corrplot(correlations)
?corrplot()
corrplot(correlations, method="color")
corrplot(correlations, method="pie")
corrplot(correlations, method="shade")
corrplot(correlations, method="number")
corrplot(correlations, method="color")
pairs(data, col=data$Outcome)
pairs(data, col=data$Outcome)
names(data)
model <- glm (Outcome ~ .-Pregnancies + Glucose + BloodPressure + SkinThickness + Insulin + BMI + DiabetesPedigreeFunction + Age, data = dresstrain, family = binomial)
predict <- predict(model, type = 'response')
table(dresstrain$Outcome, predict > 0.5)
glm.probs[1:5]
glm.probs <- predict(glm.fit,type = "response")
library(ggplot2)
data = read.csv("diabetes.csv")
head(data)
library(corrplot)
correlations <- cor(data)
corrplot(correlations, method="color")
pairs(data, col=data$Outcome)
library(caTools)
set.seed(88)
split <- sample.split(data$Outcome, SplitRatio = 0.75)
dresstrain <- subset(data, split == TRUE)
dresstest <- subset(data, split == FALSE)
model <- glm (Outcome ~ .-Pregnancies + Glucose + BloodPressure + SkinThickness + Insulin + BMI + DiabetesPedigreeFunction + Age, data = dresstrain, family = binomial)
summary(model)
predict <- predict(model, type = 'response')
glm.probs <- predict(glm.fit,type = "response")
predict <- predict(model, type = 'response')
predict
?predict()
predict <- predict(model, data = dresstest)
predict
library(ggplot2)
data = read.csv("diabetes.csv")
head(data)
library(corrplot)
correlations <- cor(data)
corrplot(correlations, method="color")
pairs(data, col=data$Outcome)
library(caTools)
set.seed(88)
split <- sample.split(data$Outcome, SplitRatio = 0.75)
dresstrain <- subset(data, split == TRUE)
dresstest <- subset(data, split == FALSE)
model <- glm (Outcome ~ .-Pregnancies + Glucose + BloodPressure + SkinThickness + Insulin + BMI + DiabetesPedigreeFunction + Age, data = dresstrain, family = binomial)
summary(model)
predict <- predict(model, type = 'response')
predict
table(dresstrain$Outcome, predict > 0.5)
library(ROCR)
ROCRpred <- prediction(predict, dresstrain$Outcome)
ROCRperf <- performance(ROCRpred, 'tpr','fpr')
plot(ROCRperf, colorize = TRUE, text.adj = c(-0.2,1.7))
?ROCR
??ROCT
??ROCR
View(dresstrain)
View(dresstest)
predict <- predict(model, newdata = dresstest, type = 'response')
predict
#plot glm
ggplot(dresstrain, aes(x=Insulin, y=Outcome)) + geom_point() +
stat_smooth(method="glm", family="binomial", se=FALSE)
#plot glm
ggplot(dresstrain, aes(x=Outcome, y=Outcome)) + geom_point() +
stat_smooth(method="glm", family="binomial", se=FALSE)
ggplot(dresstrain, aes(x=Outcome, y=Glucose)) + geom_point() +
stat_smooth(method="glm", family="binomial", se=FALSE)
ggplot(dresstrain, aes(x=Glucose, y=Outcome)) + geom_point() +
stat_smooth(method="glm", family="binomial", se=FALSE)
library(ggplot2)
library(caTools)
library(ROCR)
data = read.csv("diabetes.csv")
head(data)
library(corrplot)
correlations <- cor(data)
corrplot(correlations, method="color")
pairs(data, col=data$Outcome)
set.seed(88)
split <- sample.split(data$Outcome, SplitRatio = 0.75)
dresstrain <- subset(data, split == TRUE)
dresstest <- subset(data, split == FALSE)
model <- glm (Outcome ~ .-Pregnancies + Glucose + BloodPressure + SkinThickness + Insulin + BMI + DiabetesPedigreeFunction + Age, data = dresstrain, family = binomial)
summary(model)
predict <- predict(model, newdata = dresstest, type = 'response')
table(dresstrain$Outcome, predict > 0.5)
table(dresstest$Outcome, predict > 0.5)
ROCRpred <- prediction(predict, dresstrain$Outcome)
library(ggplot2)
library(caTools)
library(ROCR)
data = read.csv("diabetes.csv")
head(data)
library(corrplot)
correlations <- cor(data)
corrplot(correlations, method="color")
pairs(data, col=data$Outcome)
set.seed(88)
split <- sample.split(data$Outcome, SplitRatio = 0.75)
dresstrain <- subset(data, split == TRUE)
dresstest <- subset(data, split == FALSE)
model <- glm (Outcome ~ .-Pregnancies + Glucose + BloodPressure + SkinThickness + Insulin + BMI + DiabetesPedigreeFunction + Age, data = dresstrain, family = binomial)
summary(model)
predict_train <- predict(model, type = 'response')
predict_test <- predict(model, newdata = dresstest, type = 'response')
table(dresstrain$Outcome, predict > 0.5)
table(dresstrain$Outcome, predict_train > 0.5)
ROCRpred <- prediction(predict_train, dresstrain$Outcome)
ROCRperf <- performance(ROCRpred, 'tpr','fpr')
plot(ROCRperf, colorize = TRUE, text.adj = c(-0.2,1.7))
plot(ROCRperf, colorize = TRUE, text.adj = c(-0.2,6.7))
1.7
ROCRpred <- prediction(predict_train, dresstrain$Outcome)
ROCRperf <- performance(ROCRpred, 'tpr','fpr')
plot(ROCRperf, colorize = TRUE, text.adj = c(-0.2,1.7))
correlations
pairs(data, col=data$Outcome)
library(ggplot2)
library(corrplot)
library(caTools)
library(ROCR)
data = read.csv("diabetes.csv")
head(data)
correlations <- cor(data)
correlations
corrplot(correlations, method="color")
pairs(data, col=data$Outcome)
set.seed(88)
split <- sample.split(data$Outcome, SplitRatio = 0.75)
data_train <- subset(data, split == TRUE)
data_test <- subset(data, split == FALSE)
model <- glm (Outcome ~ .-Pregnancies + Glucose + BloodPressure + SkinThickness + Insulin + BMI + DiabetesPedigreeFunction + Age, data = data_train, family = binomial)
summary(model)
predict_train <- predict(model, type = 'response')
predict_test <- predict(model, newdata = data_test, type = 'response')
table(data_train$Outcome, predict_train > 0.5)
compare <- data.frame(data_test$Outcome,predict_test)
compare
for(i in predict_test)
{
if(predict_test[i] < 0.5)
predict_test[i] = 0
else
predict_test[i] = 1
}
for(i in 1:predict_test)
{
if(predict_test[i] < 0.5)
predict_test[i] = 0
else
predict_test[i] = 1
}
compare <- data.frame(data_test$Outcome,predict_test)
compare
library(ggplot2)
library(corrplot)
library(caTools)
library(ROCR)
data = read.csv("diabetes.csv")
head(data)
correlations <- cor(data)
correlations
corrplot(correlations, method="color")
pairs(data, col=data$Outcome)
set.seed(88)
split <- sample.split(data$Outcome, SplitRatio = 0.75)
data_train <- subset(data, split == TRUE)
data_test <- subset(data, split == FALSE)
model <- glm (Outcome ~ .-Pregnancies + Glucose + BloodPressure + SkinThickness + Insulin + BMI + DiabetesPedigreeFunction + Age, data = data_train, family = binomial)
summary(model)
predict_train <- predict(model, type = 'response')
predict_test <- predict(model, newdata = data_test, type = 'response')
table(data_train$Outcome, predict_train > 0.5)
ROCRpred <- prediction(predict_train, data_train$Outcome)
ROCRperf <- performance(ROCRpred, 'tpr','fpr')
plot(ROCRperf, colorize = TRUE, text.adj = c(-0.2,1.7))
for(i in 1:predict_test)
{
if(predict_test[i] < 0.5)
predict_test_c[i] = 0
else
predict_test_c[i] = 1
}
predict_test_c = predict_test
for(i in 1:predict_test)
{
if(predict_test[i] < 0.5)
predict_test_c[i] = 0
else
predict_test_c[i] = 1
}
compare <- data.frame(data_test$Outcome,predict_test)
compare
predict_test_c = predict_test
for(i in 1:predict_test)
{
if(predict_test[i] < 0.5)
predict_test_c[i] = 0
else
predict_test_c[i] = 1
}
compare <- data.frame(data_test$Outcome,predict_test_c)
compare
library(ggplot2)
library(corrplot)
library(caTools)
library(ROCR)
data = read.csv("diabetes.csv")
head(data)
correlations <- cor(data)
correlations
corrplot(correlations, method="color")
pairs(data, col=data$Outcome)
set.seed(88)
split <- sample.split(data$Outcome, SplitRatio = 0.75)
data_train <- subset(data, split == TRUE)
data_test <- subset(data, split == FALSE)
model <- glm (Outcome ~ .-Pregnancies + Glucose + BloodPressure + SkinThickness + Insulin + BMI + DiabetesPedigreeFunction + Age, data = data_train, family = binomial)
summary(model)
predict_train <- predict(model, type = 'response')
predict_test <- predict(model, newdata = data_test, type = 'response')
table(data_train$Outcome, predict_train > 0.5)
ROCRpred <- prediction(predict_train, data_train$Outcome)
ROCRperf <- performance(ROCRpred, 'tpr','fpr')
plot(ROCRperf, colorize = TRUE, text.adj = c(-0.2,1.7))
predict_test_c = predict_test
count = 0;
for(i in 1:predict_test)
{
count = count + 1;
}
compare <- data.frame(data_test$Outcome,predict_test_c)
compare
count
predict_test_c = predict_test
count = 0;
for(i in predict_test)
{
count = count + 1;
}
compare <- data.frame(data_test$Outcome,predict_test_c)
compare
count
predict_test_c = predict_test
count = 0;
for(i in predict_test)
{
if(predict_test[i] < 0.5)
predict_test_c[i] = 0
else
predict_test_c[i] = 1
}
predict_test_c = predict_test
count = 0;
for(i in predict_test)
{
if(predict_test[i] < 0.5):
predict_test_c = predict_test
count = 0;
for(i in predict_test)
{
if(predict_test[i] < 0.5)
predict_test_c[i] = 0
else
predict_test_c[i] = 1
}
predict_test_c = predict_test
count = 0;
if(predict_test[0] < 0.5)
predict_test_c[0] = 0
predict_test_c = predict_test
count = 0;
print(predict_test[0])
compare <- data.frame(data_test$Outcome,predict_test_c)
predict_test_c = predict_test
count = 0;
print(predict_test[1])
compare <- data.frame(data_test$Outcome,predict_test_c)
predict_test_c = predict_test
count = 0;
for(i in predict_test)
{
if(i < 0.5)
predict_test_c[i] = 0
else
predict_test_c[i] = 1
}
compare <- data.frame(data_test$Outcome,predict_test_c)
compare
predict_test_c = predict_test
count = 0;
if(predict_test[1] < 0.5)
predict_test_c[1] = 0
else
predict_test_c = predict_test
count = 0;
if(predict_test[1] < 0.5)
predict_test_c[1] = 0
compare <- data.frame(data_test$Outcome,predict_test_c)
compare
predict_test_c = predict_test
i = 1
while(i <= length(predict_test))
{
if(predict_test[i] < 0.5)
predict_test_c[i] = 0
else
predict_test_c[i] = 1
i = i + 1;
}
compare <- data.frame(data_test$Outcome,predict_test_c)
compare
colnames(compare) <- c("Obseerved Values","PRedicted values")
predict_test_c = predict_test
i = 1
while(i <= length(predict_test))
{
if(predict_test[i] < 0.5)
predict_test_c[i] = 0
else
predict_test_c[i] = 1
i = i + 1;
}
compare <- data.frame(data_test$Outcome,predict_test_c)
colnames(compare) <- c("Obseerved Values","PRedicted values")
comapre
predict_test_c = predict_test
i = 1
while(i <= length(predict_test))
{
if(predict_test[i] < 0.5)
predict_test_c[i] = 0
else
predict_test_c[i] = 1
i = i + 1;
}
compare <- data.frame(data_test$Outcome,predict_test_c)
colnames(compare) <- c("Obseerved Values","PRedicted values")
compare
plot(compare)
library(ggplot2)
library(corrplot)
library(caTools)
library(ROCR)
data = read.csv("diabetes.csv")
head(data)
correlations <- cor(data)
correlations
corrplot(correlations, method="color")
pairs(data, col=data$Outcome)
set.seed(88)
split <- sample.split(data$Outcome, SplitRatio = 0.75)
data_train <- subset(data, split == TRUE)
data_test <- subset(data, split == FALSE)
model <- glm (Outcome ~ .-Pregnancies + Glucose + BloodPressure + SkinThickness + Insulin + BMI + DiabetesPedigreeFunction + Age, data = data_train, family = binomial)
summary(model)
predict_train <- predict(model, type = 'response')
predict_test <- predict(model, newdata = data_test, type = 'response')
table(data_train$Outcome, predict_train > 0.5)
ROCRpred <- prediction(predict_train, data_train$Outcome)
ROCRperf <- performance(ROCRpred, 'tpr','fpr')
plot(ROCRperf, colorize = TRUE, text.adj = c(-0.2,1.7))
predict_test_c = predict_test
i = 1
while(i <= length(predict_test))
{
if(predict_test[i] < 0.5)
predict_test_c[i] = 0
else
predict_test_c[i] = 1
i = i + 1;
}
compare <- data.frame(data_test$Outcome,predict_test_c)
colnames(compare) <- c("Observed Values","Predicted values")
plot(compare)
ggplot(data = compare,aes(x = Observed Values, y = Predicted values)) + geom_abline()
ggplot(data = compare,aes(x = Observed Values)) + geom_abline()
ggplot(data = compare,aes(x = "Observed Values", y = "Predicted values")) + geom_abline()
ggplot(data = compare,aes(x = "Observed Values", y = "Predicted values")) + geom_abline() + theme_classic()
?ggplot()
ggplot(data = compare,aes(x = "Observed Values", y = "Predicted values")) + geom_freqpoly() + theme_classic()
abline
ggplot(data = compare,aes(x = "Observed Values", y = "Predicted values")) + geom_abline() + theme_classic()
ggplot(data = compare,aes(x = "Observed Values", y = "Predicted values")) +
xlab("Observed Values") + ylab("Predicted values")
ggplot(data = compare,aes(x = "Observed Values", y = "Predicted values"))
ggplot(data = compare,aes(x = "Observed Values", y = "Predicted values")) + geom_abline() + theme_classic()
ggplot(data = compare,aes(x = "Observed Values", y = "Predicted values")) + geom_abline() +
xlab("Observed Values") + ylab("Predicted values") + theme_classic()
compare
pairs(data, col=data$Outcome) + theme_classic()
summary(data)
str(data)
data %>% ggvis(~Glucose,~Insulin,fill =~Outcomes) %>% layer_points()
library('ggvis')
install.packages("ggvis")
library('ggvis')
data %>% ggvis(~Glucose,~Insulin,fill =~Outcomes) %>% layer_points()
data %>% ggvis(~Glucose,~Insulin,fill =~Outcome) %>% layer_points()
data %>% ggvis(~BMI,~DiabetesPedigreeFunction,fill =~Outcome) %>% layer_points()
data %>% ggvis(~Age,~SkinThickness,fill =~Outcome) %>% layer_points()
data %>% ggvis(~Age,~Pregnancies,fill =~Outcome) %>% layer_points()
data = read.csv("data/diabetes.csv")
head(data)
summary(data)
str(data)
library(ggplot2)
library(ggvis)
library(corrplot)
library(caTools)
library(ROCR)
data = read.csv("Data/diabetes.csv")
getwd()
data = read.csv("C:/Users/crsri/Documents/Diabetes_Prediction/Data/diabetes.csv")
head(data)
summary(data)
str(data)
knit_with_parameters('~/Diabetes_Prediction/Prediction.rmd')
